main:
  params: [args]
  steps:
  - init:
      assign:
      - project_id: ${sys.get_env("GOOGLE_CLOUD_PROJECT_ID")}
      - context: ${args.context}
      - transaction_id: ${args.transactionId}
      - transaction_time: ${args.transactionTime}
      - firestore_collection: ${args.firestoreCollection}
  - assign_product:
      assign:
      - product_id: ${args.productId}
      - product_name: ${args.productName}
      - product_description: ${args.productDescription}
      - product_urn: ${args.productUrn}
      - product_image_uri: ${args.productImageUri}
  - assign_offer:
      assign:
      - offer_id: ${args.offerId}
      - offer_price: ${args.offerPrice}
      - offer_price_currency: ${args.offerPriceCurrency}
      - offer_urn: ${args.offerUrn}
  - build_body1:
      assign:
      - body: {}
      - body["@context"]:
              stringValue: ${context}
      - body["@created"]:
              stringValue: ${transaction_time}
      - body["@updated"]:
              stringValue: ${transaction_time}
      - body["@type"]:
              stringValue: product
      - body["id"]:
              stringValue: ${product_id}
      - body["name"]:
              stringValue: ${product_name}
      - body["description"]:
              stringValue: ${product_description}
      - body["imageUri"]:
              stringValue: ${product_image_uri}
      - body["urn"]:
              stringValue: ${product_urn}
  - build_body2:
      assign:
      - body["offers"]:
            arrayValue:
                    values:
                        stringValue: ${offer_id}
      - body[offer_id]:
             mapValue:
                  fields:
                        "@type":
                                stringValue: offer
                        id:
                                stringValue: ${offer_id}
                        parentProduct:
                                stringValue: ${product_id}
                        price:
                                stringValue: ${offer_price}
                        priceCurrency:
                                stringValue: ${offer_price_currency}
                        urn:
                                stringValue: ${offer_urn}
  - create_document:
      call: googleapis.firestore.v1.projects.databases.documents.createDocument
      args:
        collectionId: ${firestore_collection}
        parent: ${"projects/" + project_id + "/databases/(default)/documents"}
        query:
          documentId: ${product_id}
        body: 
          fields: ${body}
  - get_document:
      call: googleapis.firestore.v1.projects.databases.documents.get
      args:
        name: ${"projects/" + project_id + "/databases/(default)/documents/" + firestore_collection + "/" + product_id}
      result: got
  - check:
      switch:
      - condition: ${got.fields.id.stringValue == product_id}
        next: the_end
  - failed:
      raise: ${"Got unexpected document"}
  - the_end:
      return: "SUCCESS"
