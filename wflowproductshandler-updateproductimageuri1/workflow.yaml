main:
  params: [args]
  steps:
  - init:
      assign:
      - project_id: ${sys.get_env("GOOGLE_CLOUD_PROJECT_ID")}
      - context: ${args.context}
      - transaction_id: ${args.transactionId}
      - transaction_time: ${args.transactionTime}
      - firestore_collection: ${args.firestoreCollection}
  - assign_product:
      assign:
      - product_id: ${args.productId}
      - product_image_uri: ${args.productImageUri}
  - update_document:
      call: googleapis.firestore.v1.projects.databases.documents.patch
      args:
        name: ${"projects/" + project_id + "/databases/(default)/documents/" + firestore_collection + "/" + product_id}
        currentDocument:
            exists: true
        updateMask:
            fieldPaths:
                - '`@updated`'
                - imageUri
        body:
            name: ${"projects/"+ project_id +"/databases/(default)/documents/"+ firestore_collection + "/" + product_id}
            fields:
                "@updated":
                    stringValue: ${transaction_time}
                imageUri:
                    stringValue: ${product_image_uri}
            #updateTime: ${transaction_time}
      result: update_document_result
  - get_document:
      call: googleapis.firestore.v1.projects.databases.documents.get
      args:
        name: ${"projects/" + project_id + "/databases/(default)/documents/" + firestore_collection + "/" + product_id}
      result: got
  - check:
      switch:
      - condition: ${got.fields.imageUri.stringValue == product_image_uri}
        next: the_end
  - failed:
      raise: ${"Got unexpected document"}
  - the_end:
      return: "SUCCESS"
