main:
  params: [args]
  steps:
  - init:
      assign:
      - project_id: ${sys.get_env("GOOGLE_CLOUD_PROJECT_ID")}
      - context: ${args.context}
      - transaction_id: ${args.transactionId}
      - transaction_time: ${args.transactionTime}
      - firestore_collection: ${args.firestoreCollection}
  - assign_product:
      assign:
      - product_id: ${args.productId}
      - product_name: ${args.productName}
      - product_description: ${args.productDescription}
      - product_urn: ${args.productUrn}
      - product_image_uri: ${args.productImageUri}
  - assign_offer:
      assign:
      - offer_id: ${args.offerId}
      - offer_price: ${args.offerPrice}
      - offer_price_currency: ${args.offerPriceCurrency}
      - offer_urn: ${args.offerUrn}
      - offers_array: ["${offer_id}"]
      - offer_map:
        - "@type": offer
        - id: ${offer_id}
        - parentProduct: ${product_id}
        - price: ${offer_price}
        - priceCurrency: ${offer_price_currency}
        - urn: ${offer_urn}
  - create_document:
      call: googleapis.firestore.v1.projects.databases.documents.createDocument
      args:
        collectionId: ${firestore_collection}
        parent: ${"projects/" + project_id + "/databases/(default)/documents"}
        query:
          documentId: ${product_id}
        body:
          fields:
            "@context":
              stringValue: ${context}
            "@created":
              stringValue: ${transaction_time}
            "@updated":
              stringValue: ${transaction_time}
            "@type":
              stringValue: product
            id:
              stringValue: ${product_id}
            name:
              stringValue: ${product_name}
            description:
              stringValue: ${product_description}
            imageUri:
              stringValue: ${product_image_uri}
            urn:
              stringValue: ${product_urn}
            #offers:
            #  arrayValue: ["test"]
            #${offer_id}:
            #  mapValue: ${offer_map}
            #    ("@type", offer)
            #    (id, ${offer_id})
            #    (parentProduct, ${product_id})
            #    (price, ${offer_price})
            #    (priceCurrency, ${offer_price_currency})
            #    (urn, ${offer_urn})
  - get_document:
      call: googleapis.firestore.v1.projects.databases.documents.get
      args:
        name: ${"projects/" + project_id + "/databases/(default)/documents/" + firestore_collection + "/" + product_id}
      result: got
  - check:
      switch:
      - condition: ${got.fields.id.stringValue == product_id}
        next: the_end
  - failed:
      raise: ${"Got unexpected document"}
  - the_end:
      return: "SUCCESS"
